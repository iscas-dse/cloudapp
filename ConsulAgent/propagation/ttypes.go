// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package propagation

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type PropagationResultCode int64

const (
	PropagationResultCode_ROLLBACK      PropagationResultCode = 0
	PropagationResultCode_COMMIT        PropagationResultCode = 1
	PropagationResultCode_SYSTEM_FAILED PropagationResultCode = 2
	PropagationResultCode_HEUR_HAZARD   PropagationResultCode = 3
	PropagationResultCode_HEUR_MIXED    PropagationResultCode = 4
	PropagationResultCode_HEUR_COMMIT   PropagationResultCode = 5
	PropagationResultCode_HEUR_ROLLBACK PropagationResultCode = 6
	PropagationResultCode_EVENT_ACK     PropagationResultCode = 7
	PropagationResultCode_EVENT_FAILED  PropagationResultCode = 8
)

func (p PropagationResultCode) String() string {
	switch p {
	case PropagationResultCode_ROLLBACK:
		return "ROLLBACK"
	case PropagationResultCode_COMMIT:
		return "COMMIT"
	case PropagationResultCode_SYSTEM_FAILED:
		return "SYSTEM_FAILED"
	case PropagationResultCode_HEUR_HAZARD:
		return "HEUR_HAZARD"
	case PropagationResultCode_HEUR_MIXED:
		return "HEUR_MIXED"
	case PropagationResultCode_HEUR_COMMIT:
		return "HEUR_COMMIT"
	case PropagationResultCode_HEUR_ROLLBACK:
		return "HEUR_ROLLBACK"
	case PropagationResultCode_EVENT_ACK:
		return "EVENT_ACK"
	case PropagationResultCode_EVENT_FAILED:
		return "EVENT_FAILED"
	}
	return "<UNSET>"
}

func PropagationResultCodeFromString(s string) (PropagationResultCode, error) {
	switch s {
	case "ROLLBACK":
		return PropagationResultCode_ROLLBACK, nil
	case "COMMIT":
		return PropagationResultCode_COMMIT, nil
	case "SYSTEM_FAILED":
		return PropagationResultCode_SYSTEM_FAILED, nil
	case "HEUR_HAZARD":
		return PropagationResultCode_HEUR_HAZARD, nil
	case "HEUR_MIXED":
		return PropagationResultCode_HEUR_MIXED, nil
	case "HEUR_COMMIT":
		return PropagationResultCode_HEUR_COMMIT, nil
	case "HEUR_ROLLBACK":
		return PropagationResultCode_HEUR_ROLLBACK, nil
	case "EVENT_ACK":
		return PropagationResultCode_EVENT_ACK, nil
	case "EVENT_FAILED":
		return PropagationResultCode_EVENT_FAILED, nil
	}
	return PropagationResultCode(0), fmt.Errorf("not a valid PropagationResultCode string")
}

func PropagationResultCodePtr(v PropagationResultCode) *PropagationResultCode { return &v }

func (p PropagationResultCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *PropagationResultCode) UnmarshalText(text []byte) error {
	q, err := PropagationResultCodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - EventKey
//  - EventValue
type PropagationEvent struct {
	EventKey   string `thrift:"eventKey,1" json:"eventKey"`
	EventValue string `thrift:"eventValue,2" json:"eventValue"`
}

func NewPropagationEvent() *PropagationEvent {
	return &PropagationEvent{}
}

func (p *PropagationEvent) GetEventKey() string {
	return p.EventKey
}

func (p *PropagationEvent) GetEventValue() string {
	return p.EventValue
}
func (p *PropagationEvent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PropagationEvent) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.EventKey = v
	}
	return nil
}

func (p *PropagationEvent) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EventValue = v
	}
	return nil
}

func (p *PropagationEvent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PropagationEvent"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PropagationEvent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eventKey", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:eventKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.EventKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.eventKey (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:eventKey: ", p), err)
	}
	return err
}

func (p *PropagationEvent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eventValue", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:eventValue: ", p), err)
	}
	if err := oprot.WriteString(string(p.EventValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.eventValue (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:eventValue: ", p), err)
	}
	return err
}

func (p *PropagationEvent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PropagationEvent(%+v)", *p)
}

// Attributes:
//  - Code
//  - Info
type PropagationResult_ struct {
	Code PropagationResultCode `thrift:"code,1" json:"code"`
	Info string                `thrift:"info,2" json:"info"`
}

func NewPropagationResult_() *PropagationResult_ {
	return &PropagationResult_{}
}

func (p *PropagationResult_) GetCode() PropagationResultCode {
	return p.Code
}

func (p *PropagationResult_) GetInfo() string {
	return p.Info
}
func (p *PropagationResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PropagationResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := PropagationResultCode(v)
		p.Code = temp
	}
	return nil
}

func (p *PropagationResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Info = v
	}
	return nil
}

func (p *PropagationResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PropagationResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PropagationResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *PropagationResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err)
	}
	if err := oprot.WriteString(string(p.Info)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.info (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err)
	}
	return err
}

func (p *PropagationResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PropagationResult_(%+v)", *p)
}
