/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.ac.iscas.cloudeploy.rmi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DeployService {

  public interface Iface {

    public cn.ac.iscas.cloudeploy.rmi.entity.Result apply(cn.ac.iscas.cloudeploy.rmi.entity.Agent agent, List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions) throws org.apache.thrift.TException;

    public Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> batchApply(List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents, List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions) throws org.apache.thrift.TException;

    public cn.ac.iscas.cloudeploy.rmi.entity.Result applyExecutable(cn.ac.iscas.cloudeploy.rmi.entity.Agent agent, String executable) throws org.apache.thrift.TException;

    public Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> batchApplyExecutable(List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents, String executable) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void apply(cn.ac.iscas.cloudeploy.rmi.entity.Agent agent, List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchApply(List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents, List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void applyExecutable(cn.ac.iscas.cloudeploy.rmi.entity.Agent agent, String executable, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchApplyExecutable(List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents, String executable, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public cn.ac.iscas.cloudeploy.rmi.entity.Result apply(cn.ac.iscas.cloudeploy.rmi.entity.Agent agent, List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions) throws org.apache.thrift.TException
    {
      send_apply(agent, actions);
      return recv_apply();
    }

    public void send_apply(cn.ac.iscas.cloudeploy.rmi.entity.Agent agent, List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions) throws org.apache.thrift.TException
    {
      apply_args args = new apply_args();
      args.setAgent(agent);
      args.setActions(actions);
      sendBase("apply", args);
    }

    public cn.ac.iscas.cloudeploy.rmi.entity.Result recv_apply() throws org.apache.thrift.TException
    {
      apply_result result = new apply_result();
      receiveBase(result, "apply");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "apply failed: unknown result");
    }

    public Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> batchApply(List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents, List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions) throws org.apache.thrift.TException
    {
      send_batchApply(agents, actions);
      return recv_batchApply();
    }

    public void send_batchApply(List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents, List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions) throws org.apache.thrift.TException
    {
      batchApply_args args = new batchApply_args();
      args.setAgents(agents);
      args.setActions(actions);
      sendBase("batchApply", args);
    }

    public Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> recv_batchApply() throws org.apache.thrift.TException
    {
      batchApply_result result = new batchApply_result();
      receiveBase(result, "batchApply");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchApply failed: unknown result");
    }

    public cn.ac.iscas.cloudeploy.rmi.entity.Result applyExecutable(cn.ac.iscas.cloudeploy.rmi.entity.Agent agent, String executable) throws org.apache.thrift.TException
    {
      send_applyExecutable(agent, executable);
      return recv_applyExecutable();
    }

    public void send_applyExecutable(cn.ac.iscas.cloudeploy.rmi.entity.Agent agent, String executable) throws org.apache.thrift.TException
    {
      applyExecutable_args args = new applyExecutable_args();
      args.setAgent(agent);
      args.setExecutable(executable);
      sendBase("applyExecutable", args);
    }

    public cn.ac.iscas.cloudeploy.rmi.entity.Result recv_applyExecutable() throws org.apache.thrift.TException
    {
      applyExecutable_result result = new applyExecutable_result();
      receiveBase(result, "applyExecutable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "applyExecutable failed: unknown result");
    }

    public Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> batchApplyExecutable(List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents, String executable) throws org.apache.thrift.TException
    {
      send_batchApplyExecutable(agents, executable);
      return recv_batchApplyExecutable();
    }

    public void send_batchApplyExecutable(List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents, String executable) throws org.apache.thrift.TException
    {
      batchApplyExecutable_args args = new batchApplyExecutable_args();
      args.setAgents(agents);
      args.setExecutable(executable);
      sendBase("batchApplyExecutable", args);
    }

    public Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> recv_batchApplyExecutable() throws org.apache.thrift.TException
    {
      batchApplyExecutable_result result = new batchApplyExecutable_result();
      receiveBase(result, "batchApplyExecutable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchApplyExecutable failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void apply(cn.ac.iscas.cloudeploy.rmi.entity.Agent agent, List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      apply_call method_call = new apply_call(agent, actions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class apply_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.ac.iscas.cloudeploy.rmi.entity.Agent agent;
      private List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions;
      public apply_call(cn.ac.iscas.cloudeploy.rmi.entity.Agent agent, List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.agent = agent;
        this.actions = actions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("apply", org.apache.thrift.protocol.TMessageType.CALL, 0));
        apply_args args = new apply_args();
        args.setAgent(agent);
        args.setActions(actions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public cn.ac.iscas.cloudeploy.rmi.entity.Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_apply();
      }
    }

    public void batchApply(List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents, List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchApply_call method_call = new batchApply_call(agents, actions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchApply_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents;
      private List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions;
      public batchApply_call(List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents, List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.agents = agents;
        this.actions = actions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchApply", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchApply_args args = new batchApply_args();
        args.setAgents(agents);
        args.setActions(actions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchApply();
      }
    }

    public void applyExecutable(cn.ac.iscas.cloudeploy.rmi.entity.Agent agent, String executable, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      applyExecutable_call method_call = new applyExecutable_call(agent, executable, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class applyExecutable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private cn.ac.iscas.cloudeploy.rmi.entity.Agent agent;
      private String executable;
      public applyExecutable_call(cn.ac.iscas.cloudeploy.rmi.entity.Agent agent, String executable, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.agent = agent;
        this.executable = executable;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("applyExecutable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        applyExecutable_args args = new applyExecutable_args();
        args.setAgent(agent);
        args.setExecutable(executable);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public cn.ac.iscas.cloudeploy.rmi.entity.Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_applyExecutable();
      }
    }

    public void batchApplyExecutable(List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents, String executable, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchApplyExecutable_call method_call = new batchApplyExecutable_call(agents, executable, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchApplyExecutable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents;
      private String executable;
      public batchApplyExecutable_call(List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents, String executable, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.agents = agents;
        this.executable = executable;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchApplyExecutable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchApplyExecutable_args args = new batchApplyExecutable_args();
        args.setAgents(agents);
        args.setExecutable(executable);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchApplyExecutable();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("apply", new apply());
      processMap.put("batchApply", new batchApply());
      processMap.put("applyExecutable", new applyExecutable());
      processMap.put("batchApplyExecutable", new batchApplyExecutable());
      return processMap;
    }

    public static class apply<I extends Iface> extends org.apache.thrift.ProcessFunction<I, apply_args> {
      public apply() {
        super("apply");
      }

      public apply_args getEmptyArgsInstance() {
        return new apply_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public apply_result getResult(I iface, apply_args args) throws org.apache.thrift.TException {
        apply_result result = new apply_result();
        result.success = iface.apply(args.agent, args.actions);
        return result;
      }
    }

    public static class batchApply<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchApply_args> {
      public batchApply() {
        super("batchApply");
      }

      public batchApply_args getEmptyArgsInstance() {
        return new batchApply_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchApply_result getResult(I iface, batchApply_args args) throws org.apache.thrift.TException {
        batchApply_result result = new batchApply_result();
        result.success = iface.batchApply(args.agents, args.actions);
        return result;
      }
    }

    public static class applyExecutable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, applyExecutable_args> {
      public applyExecutable() {
        super("applyExecutable");
      }

      public applyExecutable_args getEmptyArgsInstance() {
        return new applyExecutable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public applyExecutable_result getResult(I iface, applyExecutable_args args) throws org.apache.thrift.TException {
        applyExecutable_result result = new applyExecutable_result();
        result.success = iface.applyExecutable(args.agent, args.executable);
        return result;
      }
    }

    public static class batchApplyExecutable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchApplyExecutable_args> {
      public batchApplyExecutable() {
        super("batchApplyExecutable");
      }

      public batchApplyExecutable_args getEmptyArgsInstance() {
        return new batchApplyExecutable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchApplyExecutable_result getResult(I iface, batchApplyExecutable_args args) throws org.apache.thrift.TException {
        batchApplyExecutable_result result = new batchApplyExecutable_result();
        result.success = iface.batchApplyExecutable(args.agents, args.executable);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("apply", new apply());
      processMap.put("batchApply", new batchApply());
      processMap.put("applyExecutable", new applyExecutable());
      processMap.put("batchApplyExecutable", new batchApplyExecutable());
      return processMap;
    }

    public static class apply<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, apply_args, cn.ac.iscas.cloudeploy.rmi.entity.Result> {
      public apply() {
        super("apply");
      }

      public apply_args getEmptyArgsInstance() {
        return new apply_args();
      }

      public AsyncMethodCallback<cn.ac.iscas.cloudeploy.rmi.entity.Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<cn.ac.iscas.cloudeploy.rmi.entity.Result>() { 
          public void onComplete(cn.ac.iscas.cloudeploy.rmi.entity.Result o) {
            apply_result result = new apply_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            apply_result result = new apply_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, apply_args args, org.apache.thrift.async.AsyncMethodCallback<cn.ac.iscas.cloudeploy.rmi.entity.Result> resultHandler) throws TException {
        iface.apply(args.agent, args.actions,resultHandler);
      }
    }

    public static class batchApply<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchApply_args, Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result>> {
      public batchApply() {
        super("batchApply");
      }

      public batchApply_args getEmptyArgsInstance() {
        return new batchApply_args();
      }

      public AsyncMethodCallback<Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result>>() { 
          public void onComplete(Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> o) {
            batchApply_result result = new batchApply_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchApply_result result = new batchApply_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchApply_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result>> resultHandler) throws TException {
        iface.batchApply(args.agents, args.actions,resultHandler);
      }
    }

    public static class applyExecutable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, applyExecutable_args, cn.ac.iscas.cloudeploy.rmi.entity.Result> {
      public applyExecutable() {
        super("applyExecutable");
      }

      public applyExecutable_args getEmptyArgsInstance() {
        return new applyExecutable_args();
      }

      public AsyncMethodCallback<cn.ac.iscas.cloudeploy.rmi.entity.Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<cn.ac.iscas.cloudeploy.rmi.entity.Result>() { 
          public void onComplete(cn.ac.iscas.cloudeploy.rmi.entity.Result o) {
            applyExecutable_result result = new applyExecutable_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            applyExecutable_result result = new applyExecutable_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, applyExecutable_args args, org.apache.thrift.async.AsyncMethodCallback<cn.ac.iscas.cloudeploy.rmi.entity.Result> resultHandler) throws TException {
        iface.applyExecutable(args.agent, args.executable,resultHandler);
      }
    }

    public static class batchApplyExecutable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchApplyExecutable_args, Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result>> {
      public batchApplyExecutable() {
        super("batchApplyExecutable");
      }

      public batchApplyExecutable_args getEmptyArgsInstance() {
        return new batchApplyExecutable_args();
      }

      public AsyncMethodCallback<Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result>>() { 
          public void onComplete(Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> o) {
            batchApplyExecutable_result result = new batchApplyExecutable_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchApplyExecutable_result result = new batchApplyExecutable_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchApplyExecutable_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result>> resultHandler) throws TException {
        iface.batchApplyExecutable(args.agents, args.executable,resultHandler);
      }
    }

  }

  public static class apply_args implements org.apache.thrift.TBase<apply_args, apply_args._Fields>, java.io.Serializable, Cloneable, Comparable<apply_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("apply_args");

    private static final org.apache.thrift.protocol.TField AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("agent", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("actions", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new apply_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new apply_argsTupleSchemeFactory());
    }

    public cn.ac.iscas.cloudeploy.rmi.entity.Agent agent; // required
    public List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AGENT((short)1, "agent"),
      ACTIONS((short)2, "actions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AGENT
            return AGENT;
          case 2: // ACTIONS
            return ACTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AGENT, new org.apache.thrift.meta_data.FieldMetaData("agent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.ac.iscas.cloudeploy.rmi.entity.Agent.class)));
      tmpMap.put(_Fields.ACTIONS, new org.apache.thrift.meta_data.FieldMetaData("actions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.ac.iscas.cloudeploy.rmi.entity.Action.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(apply_args.class, metaDataMap);
    }

    public apply_args() {
    }

    public apply_args(
      cn.ac.iscas.cloudeploy.rmi.entity.Agent agent,
      List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions)
    {
      this();
      this.agent = agent;
      this.actions = actions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public apply_args(apply_args other) {
      if (other.isSetAgent()) {
        this.agent = new cn.ac.iscas.cloudeploy.rmi.entity.Agent(other.agent);
      }
      if (other.isSetActions()) {
        List<cn.ac.iscas.cloudeploy.rmi.entity.Action> __this__actions = new ArrayList<cn.ac.iscas.cloudeploy.rmi.entity.Action>(other.actions.size());
        for (cn.ac.iscas.cloudeploy.rmi.entity.Action other_element : other.actions) {
          __this__actions.add(new cn.ac.iscas.cloudeploy.rmi.entity.Action(other_element));
        }
        this.actions = __this__actions;
      }
    }

    public apply_args deepCopy() {
      return new apply_args(this);
    }

    @Override
    public void clear() {
      this.agent = null;
      this.actions = null;
    }

    public cn.ac.iscas.cloudeploy.rmi.entity.Agent getAgent() {
      return this.agent;
    }

    public apply_args setAgent(cn.ac.iscas.cloudeploy.rmi.entity.Agent agent) {
      this.agent = agent;
      return this;
    }

    public void unsetAgent() {
      this.agent = null;
    }

    /** Returns true if field agent is set (has been assigned a value) and false otherwise */
    public boolean isSetAgent() {
      return this.agent != null;
    }

    public void setAgentIsSet(boolean value) {
      if (!value) {
        this.agent = null;
      }
    }

    public int getActionsSize() {
      return (this.actions == null) ? 0 : this.actions.size();
    }

    public java.util.Iterator<cn.ac.iscas.cloudeploy.rmi.entity.Action> getActionsIterator() {
      return (this.actions == null) ? null : this.actions.iterator();
    }

    public void addToActions(cn.ac.iscas.cloudeploy.rmi.entity.Action elem) {
      if (this.actions == null) {
        this.actions = new ArrayList<cn.ac.iscas.cloudeploy.rmi.entity.Action>();
      }
      this.actions.add(elem);
    }

    public List<cn.ac.iscas.cloudeploy.rmi.entity.Action> getActions() {
      return this.actions;
    }

    public apply_args setActions(List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions) {
      this.actions = actions;
      return this;
    }

    public void unsetActions() {
      this.actions = null;
    }

    /** Returns true if field actions is set (has been assigned a value) and false otherwise */
    public boolean isSetActions() {
      return this.actions != null;
    }

    public void setActionsIsSet(boolean value) {
      if (!value) {
        this.actions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AGENT:
        if (value == null) {
          unsetAgent();
        } else {
          setAgent((cn.ac.iscas.cloudeploy.rmi.entity.Agent)value);
        }
        break;

      case ACTIONS:
        if (value == null) {
          unsetActions();
        } else {
          setActions((List<cn.ac.iscas.cloudeploy.rmi.entity.Action>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AGENT:
        return getAgent();

      case ACTIONS:
        return getActions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AGENT:
        return isSetAgent();
      case ACTIONS:
        return isSetActions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof apply_args)
        return this.equals((apply_args)that);
      return false;
    }

    public boolean equals(apply_args that) {
      if (that == null)
        return false;

      boolean this_present_agent = true && this.isSetAgent();
      boolean that_present_agent = true && that.isSetAgent();
      if (this_present_agent || that_present_agent) {
        if (!(this_present_agent && that_present_agent))
          return false;
        if (!this.agent.equals(that.agent))
          return false;
      }

      boolean this_present_actions = true && this.isSetActions();
      boolean that_present_actions = true && that.isSetActions();
      if (this_present_actions || that_present_actions) {
        if (!(this_present_actions && that_present_actions))
          return false;
        if (!this.actions.equals(that.actions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(apply_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAgent()).compareTo(other.isSetAgent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agent, other.agent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActions()).compareTo(other.isSetActions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actions, other.actions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("apply_args(");
      boolean first = true;

      sb.append("agent:");
      if (this.agent == null) {
        sb.append("null");
      } else {
        sb.append(this.agent);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("actions:");
      if (this.actions == null) {
        sb.append("null");
      } else {
        sb.append(this.actions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (agent != null) {
        agent.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class apply_argsStandardSchemeFactory implements SchemeFactory {
      public apply_argsStandardScheme getScheme() {
        return new apply_argsStandardScheme();
      }
    }

    private static class apply_argsStandardScheme extends StandardScheme<apply_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, apply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AGENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.agent = new cn.ac.iscas.cloudeploy.rmi.entity.Agent();
                struct.agent.read(iprot);
                struct.setAgentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.actions = new ArrayList<cn.ac.iscas.cloudeploy.rmi.entity.Action>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    cn.ac.iscas.cloudeploy.rmi.entity.Action _elem2;
                    _elem2 = new cn.ac.iscas.cloudeploy.rmi.entity.Action();
                    _elem2.read(iprot);
                    struct.actions.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setActionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, apply_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.agent != null) {
          oprot.writeFieldBegin(AGENT_FIELD_DESC);
          struct.agent.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.actions != null) {
          oprot.writeFieldBegin(ACTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.actions.size()));
            for (cn.ac.iscas.cloudeploy.rmi.entity.Action _iter3 : struct.actions)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class apply_argsTupleSchemeFactory implements SchemeFactory {
      public apply_argsTupleScheme getScheme() {
        return new apply_argsTupleScheme();
      }
    }

    private static class apply_argsTupleScheme extends TupleScheme<apply_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, apply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAgent()) {
          optionals.set(0);
        }
        if (struct.isSetActions()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAgent()) {
          struct.agent.write(oprot);
        }
        if (struct.isSetActions()) {
          {
            oprot.writeI32(struct.actions.size());
            for (cn.ac.iscas.cloudeploy.rmi.entity.Action _iter4 : struct.actions)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, apply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.agent = new cn.ac.iscas.cloudeploy.rmi.entity.Agent();
          struct.agent.read(iprot);
          struct.setAgentIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.actions = new ArrayList<cn.ac.iscas.cloudeploy.rmi.entity.Action>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              cn.ac.iscas.cloudeploy.rmi.entity.Action _elem7;
              _elem7 = new cn.ac.iscas.cloudeploy.rmi.entity.Action();
              _elem7.read(iprot);
              struct.actions.add(_elem7);
            }
          }
          struct.setActionsIsSet(true);
        }
      }
    }

  }

  public static class apply_result implements org.apache.thrift.TBase<apply_result, apply_result._Fields>, java.io.Serializable, Cloneable, Comparable<apply_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("apply_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new apply_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new apply_resultTupleSchemeFactory());
    }

    public cn.ac.iscas.cloudeploy.rmi.entity.Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.ac.iscas.cloudeploy.rmi.entity.Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(apply_result.class, metaDataMap);
    }

    public apply_result() {
    }

    public apply_result(
      cn.ac.iscas.cloudeploy.rmi.entity.Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public apply_result(apply_result other) {
      if (other.isSetSuccess()) {
        this.success = new cn.ac.iscas.cloudeploy.rmi.entity.Result(other.success);
      }
    }

    public apply_result deepCopy() {
      return new apply_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public cn.ac.iscas.cloudeploy.rmi.entity.Result getSuccess() {
      return this.success;
    }

    public apply_result setSuccess(cn.ac.iscas.cloudeploy.rmi.entity.Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((cn.ac.iscas.cloudeploy.rmi.entity.Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof apply_result)
        return this.equals((apply_result)that);
      return false;
    }

    public boolean equals(apply_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(apply_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("apply_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class apply_resultStandardSchemeFactory implements SchemeFactory {
      public apply_resultStandardScheme getScheme() {
        return new apply_resultStandardScheme();
      }
    }

    private static class apply_resultStandardScheme extends StandardScheme<apply_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, apply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new cn.ac.iscas.cloudeploy.rmi.entity.Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, apply_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class apply_resultTupleSchemeFactory implements SchemeFactory {
      public apply_resultTupleScheme getScheme() {
        return new apply_resultTupleScheme();
      }
    }

    private static class apply_resultTupleScheme extends TupleScheme<apply_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, apply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, apply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new cn.ac.iscas.cloudeploy.rmi.entity.Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class batchApply_args implements org.apache.thrift.TBase<batchApply_args, batchApply_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchApply_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchApply_args");

    private static final org.apache.thrift.protocol.TField AGENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("agents", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("actions", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchApply_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchApply_argsTupleSchemeFactory());
    }

    public List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents; // required
    public List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AGENTS((short)1, "agents"),
      ACTIONS((short)2, "actions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AGENTS
            return AGENTS;
          case 2: // ACTIONS
            return ACTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AGENTS, new org.apache.thrift.meta_data.FieldMetaData("agents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.ac.iscas.cloudeploy.rmi.entity.Agent.class))));
      tmpMap.put(_Fields.ACTIONS, new org.apache.thrift.meta_data.FieldMetaData("actions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.ac.iscas.cloudeploy.rmi.entity.Action.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchApply_args.class, metaDataMap);
    }

    public batchApply_args() {
    }

    public batchApply_args(
      List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents,
      List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions)
    {
      this();
      this.agents = agents;
      this.actions = actions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchApply_args(batchApply_args other) {
      if (other.isSetAgents()) {
        List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> __this__agents = new ArrayList<cn.ac.iscas.cloudeploy.rmi.entity.Agent>(other.agents.size());
        for (cn.ac.iscas.cloudeploy.rmi.entity.Agent other_element : other.agents) {
          __this__agents.add(new cn.ac.iscas.cloudeploy.rmi.entity.Agent(other_element));
        }
        this.agents = __this__agents;
      }
      if (other.isSetActions()) {
        List<cn.ac.iscas.cloudeploy.rmi.entity.Action> __this__actions = new ArrayList<cn.ac.iscas.cloudeploy.rmi.entity.Action>(other.actions.size());
        for (cn.ac.iscas.cloudeploy.rmi.entity.Action other_element : other.actions) {
          __this__actions.add(new cn.ac.iscas.cloudeploy.rmi.entity.Action(other_element));
        }
        this.actions = __this__actions;
      }
    }

    public batchApply_args deepCopy() {
      return new batchApply_args(this);
    }

    @Override
    public void clear() {
      this.agents = null;
      this.actions = null;
    }

    public int getAgentsSize() {
      return (this.agents == null) ? 0 : this.agents.size();
    }

    public java.util.Iterator<cn.ac.iscas.cloudeploy.rmi.entity.Agent> getAgentsIterator() {
      return (this.agents == null) ? null : this.agents.iterator();
    }

    public void addToAgents(cn.ac.iscas.cloudeploy.rmi.entity.Agent elem) {
      if (this.agents == null) {
        this.agents = new ArrayList<cn.ac.iscas.cloudeploy.rmi.entity.Agent>();
      }
      this.agents.add(elem);
    }

    public List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> getAgents() {
      return this.agents;
    }

    public batchApply_args setAgents(List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents) {
      this.agents = agents;
      return this;
    }

    public void unsetAgents() {
      this.agents = null;
    }

    /** Returns true if field agents is set (has been assigned a value) and false otherwise */
    public boolean isSetAgents() {
      return this.agents != null;
    }

    public void setAgentsIsSet(boolean value) {
      if (!value) {
        this.agents = null;
      }
    }

    public int getActionsSize() {
      return (this.actions == null) ? 0 : this.actions.size();
    }

    public java.util.Iterator<cn.ac.iscas.cloudeploy.rmi.entity.Action> getActionsIterator() {
      return (this.actions == null) ? null : this.actions.iterator();
    }

    public void addToActions(cn.ac.iscas.cloudeploy.rmi.entity.Action elem) {
      if (this.actions == null) {
        this.actions = new ArrayList<cn.ac.iscas.cloudeploy.rmi.entity.Action>();
      }
      this.actions.add(elem);
    }

    public List<cn.ac.iscas.cloudeploy.rmi.entity.Action> getActions() {
      return this.actions;
    }

    public batchApply_args setActions(List<cn.ac.iscas.cloudeploy.rmi.entity.Action> actions) {
      this.actions = actions;
      return this;
    }

    public void unsetActions() {
      this.actions = null;
    }

    /** Returns true if field actions is set (has been assigned a value) and false otherwise */
    public boolean isSetActions() {
      return this.actions != null;
    }

    public void setActionsIsSet(boolean value) {
      if (!value) {
        this.actions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AGENTS:
        if (value == null) {
          unsetAgents();
        } else {
          setAgents((List<cn.ac.iscas.cloudeploy.rmi.entity.Agent>)value);
        }
        break;

      case ACTIONS:
        if (value == null) {
          unsetActions();
        } else {
          setActions((List<cn.ac.iscas.cloudeploy.rmi.entity.Action>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AGENTS:
        return getAgents();

      case ACTIONS:
        return getActions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AGENTS:
        return isSetAgents();
      case ACTIONS:
        return isSetActions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchApply_args)
        return this.equals((batchApply_args)that);
      return false;
    }

    public boolean equals(batchApply_args that) {
      if (that == null)
        return false;

      boolean this_present_agents = true && this.isSetAgents();
      boolean that_present_agents = true && that.isSetAgents();
      if (this_present_agents || that_present_agents) {
        if (!(this_present_agents && that_present_agents))
          return false;
        if (!this.agents.equals(that.agents))
          return false;
      }

      boolean this_present_actions = true && this.isSetActions();
      boolean that_present_actions = true && that.isSetActions();
      if (this_present_actions || that_present_actions) {
        if (!(this_present_actions && that_present_actions))
          return false;
        if (!this.actions.equals(that.actions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchApply_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAgents()).compareTo(other.isSetAgents());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgents()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agents, other.agents);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActions()).compareTo(other.isSetActions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actions, other.actions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchApply_args(");
      boolean first = true;

      sb.append("agents:");
      if (this.agents == null) {
        sb.append("null");
      } else {
        sb.append(this.agents);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("actions:");
      if (this.actions == null) {
        sb.append("null");
      } else {
        sb.append(this.actions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchApply_argsStandardSchemeFactory implements SchemeFactory {
      public batchApply_argsStandardScheme getScheme() {
        return new batchApply_argsStandardScheme();
      }
    }

    private static class batchApply_argsStandardScheme extends StandardScheme<batchApply_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchApply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AGENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.agents = new ArrayList<cn.ac.iscas.cloudeploy.rmi.entity.Agent>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    cn.ac.iscas.cloudeploy.rmi.entity.Agent _elem10;
                    _elem10 = new cn.ac.iscas.cloudeploy.rmi.entity.Agent();
                    _elem10.read(iprot);
                    struct.agents.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setAgentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                  struct.actions = new ArrayList<cn.ac.iscas.cloudeploy.rmi.entity.Action>(_list11.size);
                  for (int _i12 = 0; _i12 < _list11.size; ++_i12)
                  {
                    cn.ac.iscas.cloudeploy.rmi.entity.Action _elem13;
                    _elem13 = new cn.ac.iscas.cloudeploy.rmi.entity.Action();
                    _elem13.read(iprot);
                    struct.actions.add(_elem13);
                  }
                  iprot.readListEnd();
                }
                struct.setActionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchApply_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.agents != null) {
          oprot.writeFieldBegin(AGENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.agents.size()));
            for (cn.ac.iscas.cloudeploy.rmi.entity.Agent _iter14 : struct.agents)
            {
              _iter14.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.actions != null) {
          oprot.writeFieldBegin(ACTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.actions.size()));
            for (cn.ac.iscas.cloudeploy.rmi.entity.Action _iter15 : struct.actions)
            {
              _iter15.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchApply_argsTupleSchemeFactory implements SchemeFactory {
      public batchApply_argsTupleScheme getScheme() {
        return new batchApply_argsTupleScheme();
      }
    }

    private static class batchApply_argsTupleScheme extends TupleScheme<batchApply_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAgents()) {
          optionals.set(0);
        }
        if (struct.isSetActions()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAgents()) {
          {
            oprot.writeI32(struct.agents.size());
            for (cn.ac.iscas.cloudeploy.rmi.entity.Agent _iter16 : struct.agents)
            {
              _iter16.write(oprot);
            }
          }
        }
        if (struct.isSetActions()) {
          {
            oprot.writeI32(struct.actions.size());
            for (cn.ac.iscas.cloudeploy.rmi.entity.Action _iter17 : struct.actions)
            {
              _iter17.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.agents = new ArrayList<cn.ac.iscas.cloudeploy.rmi.entity.Agent>(_list18.size);
            for (int _i19 = 0; _i19 < _list18.size; ++_i19)
            {
              cn.ac.iscas.cloudeploy.rmi.entity.Agent _elem20;
              _elem20 = new cn.ac.iscas.cloudeploy.rmi.entity.Agent();
              _elem20.read(iprot);
              struct.agents.add(_elem20);
            }
          }
          struct.setAgentsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.actions = new ArrayList<cn.ac.iscas.cloudeploy.rmi.entity.Action>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              cn.ac.iscas.cloudeploy.rmi.entity.Action _elem23;
              _elem23 = new cn.ac.iscas.cloudeploy.rmi.entity.Action();
              _elem23.read(iprot);
              struct.actions.add(_elem23);
            }
          }
          struct.setActionsIsSet(true);
        }
      }
    }

  }

  public static class batchApply_result implements org.apache.thrift.TBase<batchApply_result, batchApply_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchApply_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchApply_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchApply_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchApply_resultTupleSchemeFactory());
    }

    public Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.ac.iscas.cloudeploy.rmi.entity.Result.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchApply_result.class, metaDataMap);
    }

    public batchApply_result() {
    }

    public batchApply_result(
      Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchApply_result(batchApply_result other) {
      if (other.isSetSuccess()) {
        Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> __this__success = new HashMap<String,cn.ac.iscas.cloudeploy.rmi.entity.Result>(other.success.size());
        for (Map.Entry<String, cn.ac.iscas.cloudeploy.rmi.entity.Result> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          cn.ac.iscas.cloudeploy.rmi.entity.Result other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          cn.ac.iscas.cloudeploy.rmi.entity.Result __this__success_copy_value = new cn.ac.iscas.cloudeploy.rmi.entity.Result(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public batchApply_result deepCopy() {
      return new batchApply_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, cn.ac.iscas.cloudeploy.rmi.entity.Result val) {
      if (this.success == null) {
        this.success = new HashMap<String,cn.ac.iscas.cloudeploy.rmi.entity.Result>();
      }
      this.success.put(key, val);
    }

    public Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> getSuccess() {
      return this.success;
    }

    public batchApply_result setSuccess(Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchApply_result)
        return this.equals((batchApply_result)that);
      return false;
    }

    public boolean equals(batchApply_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchApply_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchApply_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchApply_resultStandardSchemeFactory implements SchemeFactory {
      public batchApply_resultStandardScheme getScheme() {
        return new batchApply_resultStandardScheme();
      }
    }

    private static class batchApply_resultStandardScheme extends StandardScheme<batchApply_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchApply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                  struct.success = new HashMap<String,cn.ac.iscas.cloudeploy.rmi.entity.Result>(2*_map24.size);
                  for (int _i25 = 0; _i25 < _map24.size; ++_i25)
                  {
                    String _key26;
                    cn.ac.iscas.cloudeploy.rmi.entity.Result _val27;
                    _key26 = iprot.readString();
                    _val27 = new cn.ac.iscas.cloudeploy.rmi.entity.Result();
                    _val27.read(iprot);
                    struct.success.put(_key26, _val27);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchApply_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, cn.ac.iscas.cloudeploy.rmi.entity.Result> _iter28 : struct.success.entrySet())
            {
              oprot.writeString(_iter28.getKey());
              _iter28.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchApply_resultTupleSchemeFactory implements SchemeFactory {
      public batchApply_resultTupleScheme getScheme() {
        return new batchApply_resultTupleScheme();
      }
    }

    private static class batchApply_resultTupleScheme extends TupleScheme<batchApply_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, cn.ac.iscas.cloudeploy.rmi.entity.Result> _iter29 : struct.success.entrySet())
            {
              oprot.writeString(_iter29.getKey());
              _iter29.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map30 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,cn.ac.iscas.cloudeploy.rmi.entity.Result>(2*_map30.size);
            for (int _i31 = 0; _i31 < _map30.size; ++_i31)
            {
              String _key32;
              cn.ac.iscas.cloudeploy.rmi.entity.Result _val33;
              _key32 = iprot.readString();
              _val33 = new cn.ac.iscas.cloudeploy.rmi.entity.Result();
              _val33.read(iprot);
              struct.success.put(_key32, _val33);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class applyExecutable_args implements org.apache.thrift.TBase<applyExecutable_args, applyExecutable_args._Fields>, java.io.Serializable, Cloneable, Comparable<applyExecutable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("applyExecutable_args");

    private static final org.apache.thrift.protocol.TField AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("agent", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXECUTABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("executable", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new applyExecutable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new applyExecutable_argsTupleSchemeFactory());
    }

    public cn.ac.iscas.cloudeploy.rmi.entity.Agent agent; // required
    public String executable; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AGENT((short)1, "agent"),
      EXECUTABLE((short)2, "executable");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AGENT
            return AGENT;
          case 2: // EXECUTABLE
            return EXECUTABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AGENT, new org.apache.thrift.meta_data.FieldMetaData("agent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.ac.iscas.cloudeploy.rmi.entity.Agent.class)));
      tmpMap.put(_Fields.EXECUTABLE, new org.apache.thrift.meta_data.FieldMetaData("executable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(applyExecutable_args.class, metaDataMap);
    }

    public applyExecutable_args() {
    }

    public applyExecutable_args(
      cn.ac.iscas.cloudeploy.rmi.entity.Agent agent,
      String executable)
    {
      this();
      this.agent = agent;
      this.executable = executable;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public applyExecutable_args(applyExecutable_args other) {
      if (other.isSetAgent()) {
        this.agent = new cn.ac.iscas.cloudeploy.rmi.entity.Agent(other.agent);
      }
      if (other.isSetExecutable()) {
        this.executable = other.executable;
      }
    }

    public applyExecutable_args deepCopy() {
      return new applyExecutable_args(this);
    }

    @Override
    public void clear() {
      this.agent = null;
      this.executable = null;
    }

    public cn.ac.iscas.cloudeploy.rmi.entity.Agent getAgent() {
      return this.agent;
    }

    public applyExecutable_args setAgent(cn.ac.iscas.cloudeploy.rmi.entity.Agent agent) {
      this.agent = agent;
      return this;
    }

    public void unsetAgent() {
      this.agent = null;
    }

    /** Returns true if field agent is set (has been assigned a value) and false otherwise */
    public boolean isSetAgent() {
      return this.agent != null;
    }

    public void setAgentIsSet(boolean value) {
      if (!value) {
        this.agent = null;
      }
    }

    public String getExecutable() {
      return this.executable;
    }

    public applyExecutable_args setExecutable(String executable) {
      this.executable = executable;
      return this;
    }

    public void unsetExecutable() {
      this.executable = null;
    }

    /** Returns true if field executable is set (has been assigned a value) and false otherwise */
    public boolean isSetExecutable() {
      return this.executable != null;
    }

    public void setExecutableIsSet(boolean value) {
      if (!value) {
        this.executable = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AGENT:
        if (value == null) {
          unsetAgent();
        } else {
          setAgent((cn.ac.iscas.cloudeploy.rmi.entity.Agent)value);
        }
        break;

      case EXECUTABLE:
        if (value == null) {
          unsetExecutable();
        } else {
          setExecutable((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AGENT:
        return getAgent();

      case EXECUTABLE:
        return getExecutable();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AGENT:
        return isSetAgent();
      case EXECUTABLE:
        return isSetExecutable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof applyExecutable_args)
        return this.equals((applyExecutable_args)that);
      return false;
    }

    public boolean equals(applyExecutable_args that) {
      if (that == null)
        return false;

      boolean this_present_agent = true && this.isSetAgent();
      boolean that_present_agent = true && that.isSetAgent();
      if (this_present_agent || that_present_agent) {
        if (!(this_present_agent && that_present_agent))
          return false;
        if (!this.agent.equals(that.agent))
          return false;
      }

      boolean this_present_executable = true && this.isSetExecutable();
      boolean that_present_executable = true && that.isSetExecutable();
      if (this_present_executable || that_present_executable) {
        if (!(this_present_executable && that_present_executable))
          return false;
        if (!this.executable.equals(that.executable))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(applyExecutable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAgent()).compareTo(other.isSetAgent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agent, other.agent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExecutable()).compareTo(other.isSetExecutable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecutable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executable, other.executable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("applyExecutable_args(");
      boolean first = true;

      sb.append("agent:");
      if (this.agent == null) {
        sb.append("null");
      } else {
        sb.append(this.agent);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("executable:");
      if (this.executable == null) {
        sb.append("null");
      } else {
        sb.append(this.executable);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (agent != null) {
        agent.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class applyExecutable_argsStandardSchemeFactory implements SchemeFactory {
      public applyExecutable_argsStandardScheme getScheme() {
        return new applyExecutable_argsStandardScheme();
      }
    }

    private static class applyExecutable_argsStandardScheme extends StandardScheme<applyExecutable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, applyExecutable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AGENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.agent = new cn.ac.iscas.cloudeploy.rmi.entity.Agent();
                struct.agent.read(iprot);
                struct.setAgentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXECUTABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.executable = iprot.readString();
                struct.setExecutableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, applyExecutable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.agent != null) {
          oprot.writeFieldBegin(AGENT_FIELD_DESC);
          struct.agent.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.executable != null) {
          oprot.writeFieldBegin(EXECUTABLE_FIELD_DESC);
          oprot.writeString(struct.executable);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class applyExecutable_argsTupleSchemeFactory implements SchemeFactory {
      public applyExecutable_argsTupleScheme getScheme() {
        return new applyExecutable_argsTupleScheme();
      }
    }

    private static class applyExecutable_argsTupleScheme extends TupleScheme<applyExecutable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, applyExecutable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAgent()) {
          optionals.set(0);
        }
        if (struct.isSetExecutable()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAgent()) {
          struct.agent.write(oprot);
        }
        if (struct.isSetExecutable()) {
          oprot.writeString(struct.executable);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, applyExecutable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.agent = new cn.ac.iscas.cloudeploy.rmi.entity.Agent();
          struct.agent.read(iprot);
          struct.setAgentIsSet(true);
        }
        if (incoming.get(1)) {
          struct.executable = iprot.readString();
          struct.setExecutableIsSet(true);
        }
      }
    }

  }

  public static class applyExecutable_result implements org.apache.thrift.TBase<applyExecutable_result, applyExecutable_result._Fields>, java.io.Serializable, Cloneable, Comparable<applyExecutable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("applyExecutable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new applyExecutable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new applyExecutable_resultTupleSchemeFactory());
    }

    public cn.ac.iscas.cloudeploy.rmi.entity.Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.ac.iscas.cloudeploy.rmi.entity.Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(applyExecutable_result.class, metaDataMap);
    }

    public applyExecutable_result() {
    }

    public applyExecutable_result(
      cn.ac.iscas.cloudeploy.rmi.entity.Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public applyExecutable_result(applyExecutable_result other) {
      if (other.isSetSuccess()) {
        this.success = new cn.ac.iscas.cloudeploy.rmi.entity.Result(other.success);
      }
    }

    public applyExecutable_result deepCopy() {
      return new applyExecutable_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public cn.ac.iscas.cloudeploy.rmi.entity.Result getSuccess() {
      return this.success;
    }

    public applyExecutable_result setSuccess(cn.ac.iscas.cloudeploy.rmi.entity.Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((cn.ac.iscas.cloudeploy.rmi.entity.Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof applyExecutable_result)
        return this.equals((applyExecutable_result)that);
      return false;
    }

    public boolean equals(applyExecutable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(applyExecutable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("applyExecutable_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class applyExecutable_resultStandardSchemeFactory implements SchemeFactory {
      public applyExecutable_resultStandardScheme getScheme() {
        return new applyExecutable_resultStandardScheme();
      }
    }

    private static class applyExecutable_resultStandardScheme extends StandardScheme<applyExecutable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, applyExecutable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new cn.ac.iscas.cloudeploy.rmi.entity.Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, applyExecutable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class applyExecutable_resultTupleSchemeFactory implements SchemeFactory {
      public applyExecutable_resultTupleScheme getScheme() {
        return new applyExecutable_resultTupleScheme();
      }
    }

    private static class applyExecutable_resultTupleScheme extends TupleScheme<applyExecutable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, applyExecutable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, applyExecutable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new cn.ac.iscas.cloudeploy.rmi.entity.Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class batchApplyExecutable_args implements org.apache.thrift.TBase<batchApplyExecutable_args, batchApplyExecutable_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchApplyExecutable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchApplyExecutable_args");

    private static final org.apache.thrift.protocol.TField AGENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("agents", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField EXECUTABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("executable", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchApplyExecutable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchApplyExecutable_argsTupleSchemeFactory());
    }

    public List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents; // required
    public String executable; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AGENTS((short)1, "agents"),
      EXECUTABLE((short)2, "executable");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AGENTS
            return AGENTS;
          case 2: // EXECUTABLE
            return EXECUTABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AGENTS, new org.apache.thrift.meta_data.FieldMetaData("agents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.ac.iscas.cloudeploy.rmi.entity.Agent.class))));
      tmpMap.put(_Fields.EXECUTABLE, new org.apache.thrift.meta_data.FieldMetaData("executable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchApplyExecutable_args.class, metaDataMap);
    }

    public batchApplyExecutable_args() {
    }

    public batchApplyExecutable_args(
      List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents,
      String executable)
    {
      this();
      this.agents = agents;
      this.executable = executable;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchApplyExecutable_args(batchApplyExecutable_args other) {
      if (other.isSetAgents()) {
        List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> __this__agents = new ArrayList<cn.ac.iscas.cloudeploy.rmi.entity.Agent>(other.agents.size());
        for (cn.ac.iscas.cloudeploy.rmi.entity.Agent other_element : other.agents) {
          __this__agents.add(new cn.ac.iscas.cloudeploy.rmi.entity.Agent(other_element));
        }
        this.agents = __this__agents;
      }
      if (other.isSetExecutable()) {
        this.executable = other.executable;
      }
    }

    public batchApplyExecutable_args deepCopy() {
      return new batchApplyExecutable_args(this);
    }

    @Override
    public void clear() {
      this.agents = null;
      this.executable = null;
    }

    public int getAgentsSize() {
      return (this.agents == null) ? 0 : this.agents.size();
    }

    public java.util.Iterator<cn.ac.iscas.cloudeploy.rmi.entity.Agent> getAgentsIterator() {
      return (this.agents == null) ? null : this.agents.iterator();
    }

    public void addToAgents(cn.ac.iscas.cloudeploy.rmi.entity.Agent elem) {
      if (this.agents == null) {
        this.agents = new ArrayList<cn.ac.iscas.cloudeploy.rmi.entity.Agent>();
      }
      this.agents.add(elem);
    }

    public List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> getAgents() {
      return this.agents;
    }

    public batchApplyExecutable_args setAgents(List<cn.ac.iscas.cloudeploy.rmi.entity.Agent> agents) {
      this.agents = agents;
      return this;
    }

    public void unsetAgents() {
      this.agents = null;
    }

    /** Returns true if field agents is set (has been assigned a value) and false otherwise */
    public boolean isSetAgents() {
      return this.agents != null;
    }

    public void setAgentsIsSet(boolean value) {
      if (!value) {
        this.agents = null;
      }
    }

    public String getExecutable() {
      return this.executable;
    }

    public batchApplyExecutable_args setExecutable(String executable) {
      this.executable = executable;
      return this;
    }

    public void unsetExecutable() {
      this.executable = null;
    }

    /** Returns true if field executable is set (has been assigned a value) and false otherwise */
    public boolean isSetExecutable() {
      return this.executable != null;
    }

    public void setExecutableIsSet(boolean value) {
      if (!value) {
        this.executable = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AGENTS:
        if (value == null) {
          unsetAgents();
        } else {
          setAgents((List<cn.ac.iscas.cloudeploy.rmi.entity.Agent>)value);
        }
        break;

      case EXECUTABLE:
        if (value == null) {
          unsetExecutable();
        } else {
          setExecutable((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AGENTS:
        return getAgents();

      case EXECUTABLE:
        return getExecutable();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AGENTS:
        return isSetAgents();
      case EXECUTABLE:
        return isSetExecutable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchApplyExecutable_args)
        return this.equals((batchApplyExecutable_args)that);
      return false;
    }

    public boolean equals(batchApplyExecutable_args that) {
      if (that == null)
        return false;

      boolean this_present_agents = true && this.isSetAgents();
      boolean that_present_agents = true && that.isSetAgents();
      if (this_present_agents || that_present_agents) {
        if (!(this_present_agents && that_present_agents))
          return false;
        if (!this.agents.equals(that.agents))
          return false;
      }

      boolean this_present_executable = true && this.isSetExecutable();
      boolean that_present_executable = true && that.isSetExecutable();
      if (this_present_executable || that_present_executable) {
        if (!(this_present_executable && that_present_executable))
          return false;
        if (!this.executable.equals(that.executable))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchApplyExecutable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAgents()).compareTo(other.isSetAgents());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgents()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agents, other.agents);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExecutable()).compareTo(other.isSetExecutable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecutable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executable, other.executable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchApplyExecutable_args(");
      boolean first = true;

      sb.append("agents:");
      if (this.agents == null) {
        sb.append("null");
      } else {
        sb.append(this.agents);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("executable:");
      if (this.executable == null) {
        sb.append("null");
      } else {
        sb.append(this.executable);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchApplyExecutable_argsStandardSchemeFactory implements SchemeFactory {
      public batchApplyExecutable_argsStandardScheme getScheme() {
        return new batchApplyExecutable_argsStandardScheme();
      }
    }

    private static class batchApplyExecutable_argsStandardScheme extends StandardScheme<batchApplyExecutable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchApplyExecutable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AGENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  struct.agents = new ArrayList<cn.ac.iscas.cloudeploy.rmi.entity.Agent>(_list34.size);
                  for (int _i35 = 0; _i35 < _list34.size; ++_i35)
                  {
                    cn.ac.iscas.cloudeploy.rmi.entity.Agent _elem36;
                    _elem36 = new cn.ac.iscas.cloudeploy.rmi.entity.Agent();
                    _elem36.read(iprot);
                    struct.agents.add(_elem36);
                  }
                  iprot.readListEnd();
                }
                struct.setAgentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXECUTABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.executable = iprot.readString();
                struct.setExecutableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchApplyExecutable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.agents != null) {
          oprot.writeFieldBegin(AGENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.agents.size()));
            for (cn.ac.iscas.cloudeploy.rmi.entity.Agent _iter37 : struct.agents)
            {
              _iter37.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.executable != null) {
          oprot.writeFieldBegin(EXECUTABLE_FIELD_DESC);
          oprot.writeString(struct.executable);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchApplyExecutable_argsTupleSchemeFactory implements SchemeFactory {
      public batchApplyExecutable_argsTupleScheme getScheme() {
        return new batchApplyExecutable_argsTupleScheme();
      }
    }

    private static class batchApplyExecutable_argsTupleScheme extends TupleScheme<batchApplyExecutable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchApplyExecutable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAgents()) {
          optionals.set(0);
        }
        if (struct.isSetExecutable()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAgents()) {
          {
            oprot.writeI32(struct.agents.size());
            for (cn.ac.iscas.cloudeploy.rmi.entity.Agent _iter38 : struct.agents)
            {
              _iter38.write(oprot);
            }
          }
        }
        if (struct.isSetExecutable()) {
          oprot.writeString(struct.executable);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchApplyExecutable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.agents = new ArrayList<cn.ac.iscas.cloudeploy.rmi.entity.Agent>(_list39.size);
            for (int _i40 = 0; _i40 < _list39.size; ++_i40)
            {
              cn.ac.iscas.cloudeploy.rmi.entity.Agent _elem41;
              _elem41 = new cn.ac.iscas.cloudeploy.rmi.entity.Agent();
              _elem41.read(iprot);
              struct.agents.add(_elem41);
            }
          }
          struct.setAgentsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.executable = iprot.readString();
          struct.setExecutableIsSet(true);
        }
      }
    }

  }

  public static class batchApplyExecutable_result implements org.apache.thrift.TBase<batchApplyExecutable_result, batchApplyExecutable_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchApplyExecutable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchApplyExecutable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchApplyExecutable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchApplyExecutable_resultTupleSchemeFactory());
    }

    public Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.ac.iscas.cloudeploy.rmi.entity.Result.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchApplyExecutable_result.class, metaDataMap);
    }

    public batchApplyExecutable_result() {
    }

    public batchApplyExecutable_result(
      Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchApplyExecutable_result(batchApplyExecutable_result other) {
      if (other.isSetSuccess()) {
        Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> __this__success = new HashMap<String,cn.ac.iscas.cloudeploy.rmi.entity.Result>(other.success.size());
        for (Map.Entry<String, cn.ac.iscas.cloudeploy.rmi.entity.Result> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          cn.ac.iscas.cloudeploy.rmi.entity.Result other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          cn.ac.iscas.cloudeploy.rmi.entity.Result __this__success_copy_value = new cn.ac.iscas.cloudeploy.rmi.entity.Result(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public batchApplyExecutable_result deepCopy() {
      return new batchApplyExecutable_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, cn.ac.iscas.cloudeploy.rmi.entity.Result val) {
      if (this.success == null) {
        this.success = new HashMap<String,cn.ac.iscas.cloudeploy.rmi.entity.Result>();
      }
      this.success.put(key, val);
    }

    public Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> getSuccess() {
      return this.success;
    }

    public batchApplyExecutable_result setSuccess(Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,cn.ac.iscas.cloudeploy.rmi.entity.Result>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchApplyExecutable_result)
        return this.equals((batchApplyExecutable_result)that);
      return false;
    }

    public boolean equals(batchApplyExecutable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchApplyExecutable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchApplyExecutable_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchApplyExecutable_resultStandardSchemeFactory implements SchemeFactory {
      public batchApplyExecutable_resultStandardScheme getScheme() {
        return new batchApplyExecutable_resultStandardScheme();
      }
    }

    private static class batchApplyExecutable_resultStandardScheme extends StandardScheme<batchApplyExecutable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchApplyExecutable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map42 = iprot.readMapBegin();
                  struct.success = new HashMap<String,cn.ac.iscas.cloudeploy.rmi.entity.Result>(2*_map42.size);
                  for (int _i43 = 0; _i43 < _map42.size; ++_i43)
                  {
                    String _key44;
                    cn.ac.iscas.cloudeploy.rmi.entity.Result _val45;
                    _key44 = iprot.readString();
                    _val45 = new cn.ac.iscas.cloudeploy.rmi.entity.Result();
                    _val45.read(iprot);
                    struct.success.put(_key44, _val45);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchApplyExecutable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, cn.ac.iscas.cloudeploy.rmi.entity.Result> _iter46 : struct.success.entrySet())
            {
              oprot.writeString(_iter46.getKey());
              _iter46.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchApplyExecutable_resultTupleSchemeFactory implements SchemeFactory {
      public batchApplyExecutable_resultTupleScheme getScheme() {
        return new batchApplyExecutable_resultTupleScheme();
      }
    }

    private static class batchApplyExecutable_resultTupleScheme extends TupleScheme<batchApplyExecutable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchApplyExecutable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, cn.ac.iscas.cloudeploy.rmi.entity.Result> _iter47 : struct.success.entrySet())
            {
              oprot.writeString(_iter47.getKey());
              _iter47.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchApplyExecutable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map48 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,cn.ac.iscas.cloudeploy.rmi.entity.Result>(2*_map48.size);
            for (int _i49 = 0; _i49 < _map48.size; ++_i49)
            {
              String _key50;
              cn.ac.iscas.cloudeploy.rmi.entity.Result _val51;
              _key50 = iprot.readString();
              _val51 = new cn.ac.iscas.cloudeploy.rmi.entity.Result();
              _val51.read(iprot);
              struct.success.put(_key50, _val51);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
